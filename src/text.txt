1/9/2025

What is React?

1) React is a JavaScript library (not a framework) developed by Facebook (Meta) for building user interfaces (UIs), especially Single Page Applications (SPAs).

2) It helps developers build reusable UI components that update efficiently when data changes.

Instead of reloading a whole webpage when something changes, React updates only the parts of the UI that need to change.

-------
Why do we use React?



1) Component-Based Architecture

	Breaks UI into small, reusable pieces (e.g., Navbar, Button, Card).

	Easier to develop, test, and maintain.

2) Virtual DOM (Performance Boost)

	React uses a Virtual DOM (a lightweight copy of the actual DOM).

	When data changes, React updates only the changed parts instead of re-rendering the whole page → 	makes apps faster.

3) Reusable & Scalable

	Components can be reused across projects.

	Helps in building large, scalable applications easily.

4) One-Way Data Flow

	Data flows in a single direction (parent → child), making it predictable and easy to debug.

5) Rich Ecosystem

	Huge community, libraries, and tools (like Redux, Next.js).

6) Cross-Platform

	With React Native, you can build mobile apps (iOS/Android) using the same knowledge.

------
Why do we need React?

	It makes UI development faster, cleaner, and more efficient.

	Provides a better user experience with smooth updates without page reloads.
---

2/9/2025
    
    ## file structure
    ## inport  Export
    ## css styleing
        global css
        external css
        inline css
        module.css
        object way css
    

3/9/2025

   
	## props -- drilling data to another Component

	## conditional rendering & list rendering

		conditional rendering
			it means showing or hiding parts ofUI based on some 
			condition (state,props...)


			1)ternary operator
				logical condition ? true :false
			2)logical operator && || !
		
		list rendering 
			rendering multiple items dynamically using .map()

4/9/2025

	## usestate()

		usestate is a react hook that allows you to add state (data that can change over time)
		to a functional components
		normally ,in js functions,varables disappear after the function runs
		.but in react with usestate ,react remember values between re-rendering

		const [state,setstate]=usestate(initial value)

		state--the current value
		setstate-- a function that updates the state
		initial value= starting value 

08/09/2025

	## useEffect()

		useEffect is hook that lets you perform side effect in functional 
		components.
		side effects are the task that happend outside the normal react 
		rendering process,like:

				fetching data from API 
				Setting up subscription (event listerners)
				updateing the browser DOM manually
				starting /stopping timers


			useEffect(()=>{
				//code
			},[dependencies])

09/09/2025
	
	## useRef()

		it is a react hook that gives you a box(.current) you can store
		anything in like num,str,int,object,array,function...

		that value persists between rendering

		updateinng it does not cause your compoment to re-rendering
		 
		{current.value}

	
		## useContext

		1)passing data from a parent compoment down to deeply nested child compoment is annoying
		2)normally you'd have to pass props manually each level (callinf props)
		3)useContext lets you skip all middle components and share data directly

			3 steps 
				create a context
				provider a value
				consume the value

		
		## useReducer()

			const [state,dispatch]=useReducer(reducerFunction,initalvalue)

			state = current value (like usestate)
			dispatch= a function to tell the reducer what to do
			reducerFunction(state,action) = the logic that return a new state
			initalvalue = starting value


		## Usecallback

		it's a react hook ,Every time a Component re-rendering
		it creates a brand new copy of every function inside it.

		even if the function code looks exactly the same

			1) unnecessarly child re-renders
			2) useEffect developers issues

		const varablesName= Usecallback(()=>{
			//code
		},[])
